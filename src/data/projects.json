[
  {
    "id": 1,
    "title": "SGE Multi-Tenant",
    "description": "Sistema de gestão empresarial multi-tenant para controle de produtos, fornecedores, categorias e fluxos financeiros.",
    "fullDescription": "SGE Multi-Tenant é uma plataforma robusta desenvolvida em Python/Django, voltada para gestão empresarial com suporte a múltiplos locatários. O sistema oferece autenticação, gerenciamento de produtos, fornecedores, categorias, dashboard, controle de entradas e saídas financeiras, além de integração com serviços de IA e middlewares personalizados. Possui interface web responsiva, integração com banco de dados PostgreSQL e suporte a Docker para ambientes de desenvolvimento e produção.",
    "image": "https://raw.githubusercontent.com/Kauanrodrigues01/Kauanrodrigues01/refs/heads/main/images/projetos/sge/dashboard.png",
    "technologies": [
      "Python",
      "Django",
      "CSS",
      "HTML",
      "Javascript",
      "Docker",
      "Postgresql"
    ],
    "features": [
      "Sistema de autenticação e perfis de usuário",
      "Gestão de produtos, fornecedores e categorias",
      "Dashboard com métricas e relatórios",
      "Controle de entradas e saídas financeiras",
      "Middlewares para rate limiting, logging e contexto de requisição",
      "Integração com serviços de IA",
      "Interface web responsiva",
      "Suporte multi-tenant",
      "Deploy facilitado com Docker"
    ],
    "challenges": [
      "Implementação de arquitetura multi-tenant",
      "Garantia de segurança e isolamento de dados entre locatários",
      "Otimização de consultas e relatórios",
      "Integração de middlewares customizados",
      "Manutenção da responsividade e usabilidade da interface"
    ],
    "category": "Gestão Empresarial",
    "year": "2025",
    "duration": "6 meses",
    "liveUrl": "",
    "githubUrl": "https://github.com/aglayrton/sge"
  },
  {
    "id": 2,
    "title": "Checkout Mercado Pago",
    "description": "Sistema completo de pagamentos com PIX, Cartão e Boleto via API Mercado Pago",
    "fullDescription": "Checkout Mercado Pago é um projeto de estudo avançado que demonstra uma integração completa com a API do Mercado Pago, suportando três métodos de pagamento: PIX, Cartão de Crédito e Boleto Bancário. O sistema foi desenvolvido com FastAPI, SQLAlchemy e inclui funcionalidades como webhooks para notificações em tempo real, interface responsiva com Tailwind CSS, persistência de dados com migrações Alembic, validação robusta com Pydantic e tratamento completo de erros. O projeto simula um fluxo de checkout profissional com atualizações automáticas de status via webhooks.",
    "image": "https://raw.githubusercontent.com/Kauanrodrigues01/Kauanrodrigues01/refs/heads/main/images/projetos/checkout-mercado-pago/checkout-cartao.png",
    "technologies": [
      "Python",
      "FastAPI",
      "SQLAlchemy",
      "HTML",
      "CSS",
      "Javascript",
      "Postgresql"
    ],
    "features": [
      "Três métodos de pagamento: PIX, Cartão de Crédito e Boleto",
      "Sistema de webhooks para notificações em tempo real",
      "Interface responsiva com Tailwind CSS e validação frontend",
      "API RESTful completa com documentação Swagger automática",
      "Persistência de dados com SQLAlchemy e migrações Alembic",
      "Validação robusta de dados com Pydantic schemas",
      "Tratamento de erros personalizado e mapeamento de status",
      "Tokenização segura para pagamentos com cartão",
      "Geração automática de QR Code para PIX",
      "Sistema modular e reutilizável"
    ],
    "challenges": [
      "Implementação de webhooks para sincronização em tempo real",
      "Tokenização segura e validação de dados de cartão de crédito",
      "Mapeamento completo de status e erros da API Mercado Pago",
      "Arquitetura modular com separação de responsabilidades",
      "Configuração de ambiente com múltiplas variáveis",
      "Interface dinâmica com alternância entre métodos de pagamento"
    ],
    "category": "Gateway de Pagamento / Fintech",
    "year": "2025",
    "duration": "2 meses",
    "liveUrl": "",
    "githubUrl": "https://github.com/Kauanrodrigues01/integracao-pagamento-mercado-pago"
  },
  {
    "id": 3,
    "title": "Stock GPT",
    "description": "Assistente inteligente de estoque que responde perguntas em linguagem natural usando IA",
    "fullDescription": "Stock GPT é um chatbot inteligente desenvolvido com Streamlit e LangChain que utiliza modelos de IA da OpenAI (GPT-3.5, GPT-4, GPT-4-turbo) para responder perguntas sobre estoque de produtos através de linguagem natural. O sistema implementa o padrão ReAct (Reasoning + Acting) para converter consultas em linguagem natural para SQL automaticamente, oferecendo insights sobre produtos, preços, categorias, fornecedores e relatórios de estoque de forma conversacional e intuitiva.",
    "image": "https://raw.githubusercontent.com/Kauanrodrigues01/Kauanrodrigues01/refs/heads/main/images/projetos/stock-agent/page.png",
    "technologies": [
      "Python",
      "Streamlit",
      "LangChain",
      "OpenAI",
      "SQLite"
    ],
    "features": [
      "Interface conversacional com chat inteligente",
      "Suporte para múltiplos modelos GPT (3.5, 4, 4-turbo)",
      "Controle de temperatura para ajustar criatividade das respostas",
      "Consultas em linguagem natural convertidas automaticamente para SQL",
      "Histórico de conversas durante a sessão",
      "Análises inteligentes de estoque com relatórios automáticos",
      "Sistema ReAct para raciocínio e execução de ações",
      "Interface totalmente em português brasileiro",
      "Integração com banco SQLite contendo 12 produtos e 18 tabelas"
    ],
    "challenges": [
      "Implementação do padrão ReAct para tomada de decisões inteligentes",
      "Integração complexa entre LangChain, OpenAI e SQL Database Toolkit",
      "Conversão precisa de linguagem natural para consultas SQL",
      "Otimização de prompts para respostas contextuais e precisas",
      "Gerenciamento de estado e histórico de conversas no Streamlit",
      "Formatação amigável de respostas técnicas do banco de dados"
    ],
    "category": "Inteligência Artificial",
    "year": "2024",
    "duration": "2 meses",
    "liveUrl": "",
    "githubUrl": "https://github.com/Kauanrodrigues01/stock-agent"
  },
  {
    "id": 4,
    "title": "Flix API",
    "description": "API REST completa para gerenciamento de filmes, atores, gêneros e avaliações com autenticação JWT",
    "fullDescription": "Flix API é uma aplicação web robusta desenvolvida com Django REST Framework que oferece um sistema completo para catalogação e avaliação de filmes. O projeto inclui gestão de atores com suporte a 50+ nacionalidades, sistema de gêneros, avaliações com estrelas (0-5), autenticação JWT com refresh tokens, filtros avançados, importação de dados via CSV, documentação Swagger automática e arquitetura containerizada com Docker. A API oferece endpoints RESTful para todas as operações CRUD e inclui sistema de permissões granular para controle de acesso.",
    "image": "https://raw.githubusercontent.com/Kauanrodrigues01/Kauanrodrigues01/refs/heads/main/images/projetos/flix-api/swagger-doc.jpeg",
    "technologies": [
      "Python",
      "Django",
      "Postgresql",
      "Docker",
      "Git"
    ],
    "features": [
      "CRUD completo para filmes, atores, gêneros e avaliações",
      "Sistema de autenticação JWT com refresh e blacklist tokens",
      "Suporte a 50+ nacionalidades para atores",
      "Sistema de avaliações com estrelas (0-5) e comentários",
      "Filtros avançados (título, gênero, ano, atores, notas)",
      "Importação em lote de atores via CSV",
      "Documentação automática com Swagger UI",
      "Sistema de permissões granular e proteção de rotas",
      "Paginação customizável para todos os endpoints",
      "Estatísticas de filmes e avaliações agregadas",
      "Containerização completa com Docker e Docker Compose",
      "Suporte a PostgreSQL e SQLite"
    ],
    "challenges": [
      "Implementação de sistema de permissões granular para diferentes tipos de usuário",
      "Criação de filtros avançados com relacionamentos entre modelos",
      "Otimização de consultas com select_related e prefetch_related",
      "Validações complexas com relacionamentos many-to-many",
      "Configuração de autenticação JWT com rotação de tokens",
      "Estruturação de dockerização multi-stage para otimização"
    ],
    "category": "API REST",
    "year": "2025",
    "duration": "3 meses",
    "liveUrl": "",
    "githubUrl": "https://github.com/Kauanrodrigues01/flix-api"
  }
]